-- nv140420 split level_scripts table for proceed() and process_info_portion()
local level_scripts = {
	escape_tasks,
	garbage_tasks,
	-- agroprom_tasks, -- proceed() no longer used
	darkvalley_tasks,
	bar_rostok_tasks,
	-- yantar_tasks, -- not used in vanilla
	-- mil_tasks, -- proceed() no longer used
	-- radar_tasks, -- not used in vanilla
	pripyat_tasks
}

local info_scripts = {
	-- create ui_tasks.script w/process_info_portion() and enable this if you want to process UI changes
	-- ui_ = ui_tasks, 
	esc = escape_tasks,
	gar = garbage_tasks,
	agr = agroprom_tasks,
	-- dar = darkvalley_tasks, -- enable if needed
	val = darkvalley_tasks,
	bar = bar_rostok_tasks,
	-- yan = yantar_tasks, -- does nothing
	mil = mil_tasks,
	-- radar_tasks, -- nv140420 not used in vanilla
	pri = pripyat_tasks, -- turn on Pripyat markers
	aes = pripyat_tasks -- turn off Pripyat markers
}

--[[ nv120322 - autojump not used in retail
local jump_level_by_name = {
	l01_escape				= "l02_garbage",
	l02_garbage				= "l03_agroprom",
	l03_agroprom			= "l03u_agr_underground",
	l03u_agr_underground	= "l04_darkvalley",
	l04_darkvalley			= "l04u_labx18",
	l04u_labx18				= "l05_bar",
	l05_bar					= "l06_rostok",
	l06_rostok				= "l07_military",
	l07_military			= "l08_yantar",
	l08_yantar				= "l08u_brainlab",
	l08u_brainlab			= "l10_radar",
	l10_radar				= "l10u_bunker",
	l10u_bunker				= "l11_pripyat",
	l11_pripyat				= "l12_stancia",
	l12_stancia				= "l12u_sarcofag",
	l12u_sarcofag			= "l12u_control_monolith",
	l12u_control_monolith	= "l12_stancia_2",
	l12_stancia_2			= "l01_escape"
}
--]]

function proceed()
	if db.actor == nil then
		return
	end
	for k, v in pairs( level_scripts ) do
		v.proceed()
	end

--[[ nv120322 - autojump not used in retail
	if db.actor:has_info("autojump_enabled") then
		local jname = jump_level_by_name[level.name()]
		if jname ~= nil then
			get_console():execute("flush")
			get_console():execute("jump_to_level "..jname)
		end
	end
--]]
end

--[[ nv120322 - autojump not used in retail
function autojump()
	db.actor:give_info_portion("autojump_enabled")
end
--]]

function process_info_portion(info_id)
	if db.actor == nil then -- or string.sub(info_id, 1, 3) == "ui_" then
		return
	end
	-- nv140420 optimized to avoid unneeded looping
	--[[
	for k, v in pairs( level_scripts ) do
		if v.process_info_portion(info_id) then
			return
		end
	end
	--]]
	local info_script = info_scripts[string.sub(info_id, 1, 3)]
	if info_script then info_script.process_info_portion(info_id) end
end

function add_location(sid, location, hint, persistent)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		if obj then
			if not hint then hint = "" end
			if persistent then
				level.map_add_object_spot_ser(obj.id, location, hint)
			else
				level.map_add_object_spot(obj.id, location, hint)
			end
		end
	end
end

function remove_location(sid, location)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		if obj and level.map_has_object_spot(obj.id, location) > 0 then
			level.map_remove_object_spot(obj.id, location)
		end
	end
end

function remove_location_safe(sid, location)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		if obj then
		   for a = 1, level.map_has_object_spot(obj.id, location), 1 do
			   level.map_remove_object_spot(obj.id, location)
		   end	
		end
	end
end

function is_map_spot_present(sid, location)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		if obj and level.map_has_object_spot(obj.id, location) ~= 0 then
		   return true
		end
	end
	return false
end
  

function add_lchanger_location()
	local sim = alife()
	if sim then
		-- escape
		local obj = sim:story_object(91)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_garbage")
		end

		-- garbage
		-- obj = sim:story_object(191) -- not used
		-- if obj then
			-- level.map_add_object_spot(obj.id, "level_changer", "to_agroprom")
		-- end
		obj = sim:story_object(192)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_agroprom")
		end
		obj = sim:story_object(193)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_escape")
		end
		obj = sim:story_object(194)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_bar")
		end
		-- obj = sim:story_object(195) -- not used
		-- if obj then
			-- level.map_add_object_spot(obj.id, "level_changer", "to_darkvalley")
		-- end
		obj = sim:story_object(196)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_darkvalley")
		end
		
		-- agroprom
		obj = sim:story_object(391)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_garbage")
		end
		obj = sim:story_object(392)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_garbage")
		end

		-- darkvalley
		obj = sim:story_object(415)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_garbage")
		end
		obj = sim:story_object(416)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_garbage")
		end
		obj = sim:story_object(417)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_escape")
		end

		-- rostok
		-- nv 090107 new marker for rostok to bar
		obj = sim:story_object(591)
		if obj then
			-- level.map_add_object_spot(obj.id, "level_changer", "to_bar")
			level.map_add_object_spot(obj.id, "level_changer", "bar_rostok")
		end
		obj = sim:story_object(608)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_yantar")
		end

		-- bar
		obj = sim:story_object(592)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_military")
		end
		obj = sim:story_object(593)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_garbage")
		end
		obj = sim:story_object(594)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "bar_rostok")
		end

		-- military
		obj = sim:story_object(771)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_bar")
		end
		obj = sim:story_object(773)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_radar")
		end

		-- yantar
		obj = sim:story_object(925)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_rostok")
		end

		-- radar
		obj = sim:story_object(1007)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_pripyat")
		end
		obj = sim:story_object(1008)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_military")
		end

		-- pripyat
		obj = sim:story_object(833)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_radar")
		end
		obj = sim:story_object(832)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_aes")
		end

		-- dynamic level changer assignments
		obj = sim:story_object(10240)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_agroprom")
		end
		obj = sim:story_object(10241)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_darkvalley")
		end
		obj = sim:story_object(10242)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_escape")
		end
		obj = sim:story_object(10243)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_yantar")
		end
		obj = sim:story_object(10244)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_agroprom")
		end
		obj = sim:story_object(10245)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_pripyat")
		end
		obj = sim:story_object(10246)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_aes")
		end
		obj = sim:story_object(10247)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_yantar")
		end
		obj = sim:story_object(10248)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer", "to_military")
		end

	end
end


function set_task_state(id_state, id_task, id_subtask)
	if db.actor then
		db.actor:set_task_state(id_state, id_task, id_subtask)
	end
end

function notify_new_task()
end
