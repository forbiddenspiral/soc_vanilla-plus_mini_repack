name = "Faction Relationship Repair"
description = "Repairs relationship with a faction if needed.\\nPress the key corresponding to the number for the faction.\\n1 = Duty, 2 = Freedom, 3 = Loners, 4 = Ecologists."
author = "NatVac"
revision = "1.1"
number_of_parameters = "key"

keys = {
	["1"] = {dik_key=DIK_keys.DIK_1,keystroke="1"},
	["2"] = {dik_key=DIK_keys.DIK_2,keystroke="2"},
	["3"] = {dik_key=DIK_keys.DIK_3,keystroke="3"},
	["4"] = {dik_key=DIK_keys.DIK_4,keystroke="4"}
}

function main(faction_var)
	local faction, faction_name
	local faction_repaired = " faction relations set neutral"
	local faction_index = tonumber(faction_var)
	if faction_index == 1 then
		faction = "dolg"
		faction_name = "Duty"
	elseif faction_index == 2 then
		faction = "freedom"
		faction_name = "Freedom"
	elseif faction_index == 3 then
		faction = "stalker"
		faction_name = "Loner"
	elseif faction_index == 4 then
		faction = "ecolog"
		faction_name = "Ecologist"
	else
		_z.show_small_msg("Unsupported value: "..tostring(faction_var))
		return false
	end
	local old_relations = relation_registry.community_goodwill(faction, db.actor:id())
	if old_relations < 0 then
		relation_registry.set_community_goodwill(faction, db.actor:id(), 0)
		_z.show_blinking_msg(faction_name..faction_repaired.." -- was "..tostring(old_relations))
	end
	local faction_relations_value = relation_registry.community_goodwill(faction, db.actor:id())
	local new_relations_str = tostring(faction_relations_value)
	if faction_relations_value > 500 then
		new_relations_str = new_relations_str.." (friend)"
	else
		new_relations_str = new_relations_str.." (neutral)"
	end
	_z.show_small_msg(faction_name.." relations now "..new_relations_str)
end