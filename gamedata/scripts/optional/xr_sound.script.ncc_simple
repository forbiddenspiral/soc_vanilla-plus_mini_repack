---------------------------------------------------------------------------------------------------------------------
--	Схема озвучки
--	автор:  Диденко Руслан  (Stohe)
--	update: Чугай Александр (Chugai)
--	update 3: NatVac 2010/08/28 - max compat with old way
--	 - sounds still obnoxious, but system streamlined
----------------------------------------------------------------------------------------------------------------------
-- keep these the same as in sound_theme.script - note play_sound order dependency!
local rmk_chatter   = 0 -- one second
local rmk_react     = 1 -- one to two
local rmk_muse      = 2 -- three to five
local rmk_once      = 3 -- three to five, played only once
local rmk_greet     = 4 -- requires min/max
local rmk_sporadic  = 5 -- requires min/max
local rmk_priority  = 6 -- requires min/max

key_by_id = {}
group_idle = {}

--function printf()
--end

function get_sound(path, tt, npc)
	if path == nil then return nil end
	if path.exec == nil then
		-- чтение настроек темы
		tt.rmk_type = path.rmk_type
		if tt.rmk_type == nil then return nil end
		local npc_id_tbl = path.max_ids[npc:id()]
		tt.into_id = path.into_id
		tt.into_max = npc_id_tbl.into_max
		-- this is broken in vanilla, but fixing it has trouble of its own
		tt.into_cycled = npc_id_tbl.into_cycled
		-- tt.into_last = nil --nv 100808 not used

		tt.rnd_id = path.rnd_id
		tt.rnd_max = npc_id_tbl.rnd_max
		-- tt.rnd_last = nil --nv 100808 not used

		if tt.rmk_type > rmk_once then
			tt.min_snd = path.min_snd or 1
			tt.max_snd = path.max_snd or 2
			tt.rnd     = path.rnd --or 100
		end
		-- tt.rnd_snd = path.rnd_snd --nv 100808 not used
	else
		get_sound(path.types[path.exec(path.types, npc)], tt, npc)
	end
end
-- Формирование ключа персонажа
function get_key(npc)
	local key
	local npc_id = npc:id()

	-- формирование ключа
	local overrides = xr_logic.generic_scheme_overrides(npc)
	if overrides and
		overrides.soundgroup 
	then
		key = overrides.soundgroup
	else
		key = utils.to_str(npc_id)
	end

	-- апдейт таблиц :) не менять!
	local keyid = xr_sound.key_by_id[npc_id]
	if keyid ~= key then
		if xr_sound.group_idle[keyid] ~= nil then
			xr_sound.group_idle[keyid].num_in_group = xr_sound.group_idle[keyid].num_in_group - 1
		end
		xr_sound.key_by_id[npc_id] = key
		if xr_sound.group_idle[key] == nil then
			xr_sound.group_idle[key] = {num_in_group = 1}
		else
			xr_sound.group_idle[key].num_in_group = xr_sound.group_idle[key].num_in_group + 1
		end
	end
	return key
end

-----------------------------------------------------------------------------------------------------------------------------------
--	Установка и распарсивание тем в файлы.
-----------------------------------------------------------------------------------------------------------------------------------
function set_sound(npc, sound, now, into_timeout)
--	printf("*SND* [%s] try to change SND to [%s]", npc:name(), tostring(sound))

	local npc_id = npc:id()
	if (db.sound[npc_id] == nil or
	   db.sound[npc_id].theme ~= sound) or
	   now == true
	then
--		if db.sound[npc_id] == nil then
--			printf("*SND* change SND [_] to [%s] for [%s]", tostring(sound), npc:name())
--		else
--			printf("*SND* change SND [%s] to [%s] for [%s]", tostring(db.sound[npc_id].theme), tostring(sound), npc:name())
--		end
		-- Туточки надобно распарсить имена тем в их id
		if sound == nil then sound = "" end
		if db.sound[npc_id] == nil then db.sound[npc_id] = {} end
		local npc_sounds = db.sound[npc_id]
		npc_sounds.theme = sound
		npc_sounds.snd = parse_names(sound)
		if npc_sounds.last_snd == nil then
			npc_sounds.last_snd = {}
		else

			local snd_table = {}
			local t = 0
			for k,v in pairs(npc_sounds.snd) do
				snd_table[t] = {}
				get_sound(sound_theme.theme[v], snd_table[t], npc)
				t = t + 1
			end	
			for k,v in pairs(snd_table) do
				if v.into_id then npc_sounds.last_snd[v.into_id] = nil end
				if v.rnd_id then npc_sounds.last_snd[v.rnd_id] = nil end
			end	

		end
		-- Устанавливаем входную паузу
		local key = get_key(npc)
		xr_sound.group_idle[key].begin = time_global()
		if into_timeout then
			xr_sound.group_idle[key].idle = into_timeout
		else
			xr_sound.group_idle[key].idle = 0
		end

		if now == true then
			stop_play_sound(npc)
		end
	end
end

function set_sound_play(npc, sound, timeout)
	-- printf("*SND* play SND to [%s] for [%s]", utils.to_str(sound), npc:name())
	local npc_id = npc:id()
	if db.sound[npc_id] == nil then db.sound[npc_id] = {} end
	if db.sound[npc_id].last_snd == nil then
		db.sound[npc_id].last_snd = {}
	end
	stop_play_sound(npc)
	this.play_sound(npc, parse_names(sound), timeout)
end

function update(npc)
	if npc:active_sound_count() ~= 0 then return end
	local npc_id = npc:id()
	
	--' Если задана тема, то нужно играть ее.
	--' Если не задана, то нужно играть idle, при условии что у нас нет врагов и денжеров.
	local npc_sounds = db.sound[npc_id]
	if npc_sounds ~= nil and npc_sounds.snd == nil then
		return 
	end	

	local key = get_key(npc)

	local group_table = xr_sound.group_idle[key]
	if group_table == nil then
		return
	end

	if group_table.busy == true then
		if group_table.last_npc ~= npc_id then
			return
		end
		-- if npc:active_sound_count() == 0 then --already checked above
			group_table.busy = false
		-- end
	end

	if group_table.num_in_group > 1 and
	   group_table.last_npc == npc_id then
		return
	end

	if table.getn(npc_sounds.snd) == 0 then
		return
	end

--	printf("EE: group = %s begin = %s idle = %s", tostring(key), tostring(group_table.begin), tostring(group_table.idle))
	if group_table.begin == nil or
	   time_global() - group_table.begin >= group_table.idle
	then
		this.play_sound(npc, npc_sounds.snd)
		if group_table.idle == nil then
			group_table.idle = 0
		end
		group_table.busy = true
		group_table.begin = time_global()
		group_table.last_npc = npc_id
	end
end


function play_sound(npc, themes, timeout)
	-- нужно составить список тем
	local snd_table = {}
	local t = 0
	for k,v in pairs(themes) do
		snd_table[t] = {}
		if sound_theme.theme[v] ~= nil then
			snd_table[t].theme = v
			get_sound(sound_theme.theme[v], snd_table[t], npc)
			t = t + 1 --iterator moved here as protection for quit_on_abort = false
		else
			abort("ERROR: ILLEGAL PLAY SOUND!!! %s for %s", v, npc:name())
		end
	end	
	--printf("*")
	--print_table(snd_table)
	if t == 0 then return end
	-- из списка тем выбираем одну.	
	local snd = snd_table[math.random(0, t-1)]
	if snd ~= nil then
		--printf("!")
		--print_table(snd)
		-- remark types determine the amount of delay after speaking
		local snd_type = snd.rmk_type
		if snd_type == nil then return end -- probably combat "state"
		local npc_id = npc:id()
		local group_table = xr_sound.group_idle[get_key(npc)]
		-- group_table.idle = math.random(snd.min_snd, snd.max_snd)*1000
		if snd_type > rmk_once then
			group_table.idle = math.random(snd.min_snd*1000, snd.max_snd*1000)
			if snd.rnd and math.random(100) > snd.rnd then -- we don't play a sound this time
				return
			end
		elseif snd_type > rmk_react then --rmk_muse or rmk_once
			group_table.idle = math.random(32, 50) * 100 -- this yields 1/10 second random numbers
		elseif snd_type == rmk_react then
			group_table.idle = math.random(10, 20) * 100
		else -- rmk_chatter
			group_table.idle = 1000
		end

		if group_table.last_snd	== nil then
			group_table.last_snd = {}
		end

		-- необходимо ли нам играть into или rnd звуки
		if snd.into_max ~= nil and snd.into_max > 0 then
			local last_npc_snd_tbl = db.sound[npc_id].last_snd
			local last_seq = last_npc_snd_tbl[snd.into_id]
			if last_seq == nil then
				-- играем входные
				last_seq = -1
			elseif last_seq == snd.into_max - 1 then
				-- this now works -- is that a good thing?
				if snd.into_cycled == true then
					last_seq = -1 --nil 
				else
					return
				end
			end

			--printf("*SND* play seq [%s] for [%s]", last_npc_snd_tbl[snd.into_id]+1, npc:name())
			-- process_tutor_on_sound(snd.theme)
			npc:play_sound(snd.into_id, 1, 0, 1, 0, last_seq + 1)
			last_npc_snd_tbl[snd.into_id] = last_seq + 1
			--printf("*SND* play seq [%s] for [%s]", last_npc_snd_tbl[snd.into_id], npc:name())
			return
		elseif snd.rnd_max ~= nil and snd.rnd_max > 0 then
			-- играем рандомные
			local s = 0
			local last_rnd = group_table.last_snd[snd.rnd_id]
			-- if snd.rnd_max == 1 then
				-- s = 0
			-- else
			if snd.rnd_max > 1 then
				-- Если прошлый раз проигрывался такой же набор тем
				-- то учитывать последний звук для группы.
--				if db.sound[npc_id].last_snd[snd.rnd_id] ~= nil then
				if last_rnd == nil then
					s = math.random(0, snd.rnd_max-1)
				else
					s = math.random(0, snd.rnd_max-2)
					if s >= last_rnd then s = s + 1 end
				end	
			end

			if timeout == nil then
				timeout = 0
			end
			--printf("*SND* play rnd [%s] for [%s]", s, npc:name())
			-- process_tutor_on_sound(snd.theme)
			npc:play_sound(snd.rnd_id, timeout+1, timeout, 1, 0, s)
			--db.sound[npc_id].last_snd[snd.rnd_id] = s
			group_table.last_snd[snd.rnd_id] = s
		end
	end
end

function get_last_IDS(npc, theme)
	local last_table = db.sound[npc:id()].last_snd
	local snd_table = {}
	if sound_theme.theme[theme] ~= nil then
		get_sound(sound_theme.theme[theme], snd_table, npc)
	end	
	-- printf("LAST INTO ID for [%s] = [%s], max [%s]", theme, last_table[snd_table.into_id], snd_table.into_max)
	return last_table[snd_table.into_id], snd_table.into_max
end


function load_sound(npc)
	sound_theme.load_sound(npc)
end

-- function process_tutor_on_sound(theme)
-- end


--' Actor sound player
local actor_sound = {}
function set_actor_sound(sound)
	-- printf("*ACTOR SND* try to change SND to [%s]", tostring(sound))
	if actor_sound.theme ~= sound then
		--' Туточки надобно распарсить имена тем в их id
		if sound == nil then sound = "" end
		actor_sound.theme = sound
		actor_sound.begin = nil
		
		this.set_actor_sound_factor(1)
	end
end

function set_actor_sound_factor(factor)
	local theme = sound_theme.actor_theme[actor_sound.theme]
	if theme ~= nil then
		actor_sound.min_snd = theme.min_snd * factor
		actor_sound.max_snd = theme.max_snd * factor
	end
end

function update_actor()
	local theme = sound_theme.actor_theme[actor_sound.theme]
	if theme == nil then return end

	if table.getn(theme.sounds) == 0 then
		return
	end

	if actor_sound.begin == nil or
	   time_global() - actor_sound.begin >= actor_sound.idle
	then
		actor_sound.begin = time_global()

		--' Тут надо отыграть звук
		local sound = theme.sounds[math.random(table.getn(theme.sounds))]
		if sound ~= nil then
			sound:play(db.actor, 0, sound_object.s2d)
		end
		actor_sound.idle = math.random(actor_sound.min_snd, actor_sound.max_snd)
	end
end




--' Таблица для хранения созданных саунд обжектов.
sound_object_by_theme = {}
--' type = [random|seq|looped]
function get_sound_object(theme, t_type)
	if sound_theme.ph_snd_themes[theme] == nil then
		abort("ph_snd_themes for theme %s", tostring(theme))
		return
	end

	if sound_object_by_theme[theme] == nil then
		sound_object_by_theme[theme] = {}
	end

	if t_type == nil then
		t_type = "random"
	end

	--' Выбор следующего айдишника
	local play_id = -1
	local table_size = table.getn(sound_theme.ph_snd_themes[theme])
	if sound_object_by_theme[theme].last_id == nil then
		if t_type == "random" then
			if table_size >= 2 then
				play_id = math.random(1, table_size)
			else
				play_id = 1
			end
		else
			play_id = 1
		end
	else
		if t_type == "random" then
			if table_size >= 2 then
				play_id = math.random(1, table_size - 1)
				if play_id >= sound_object_by_theme[theme].last_id then play_id = play_id + 1 end
			else
				play_id = 1
			end
		else
			if sound_object_by_theme[theme].last_id < table_size then
				play_id = sound_object_by_theme[theme].last_id + 1
			else
				if type == "looped" then
					play_id = 1
				end
			end
		end
	end

	-- printf("SOUND_OBJECT: selected id [%s] for theme [%s], type [%s], size [%s]", tostring(play_id), tostring(theme), tostring(type), table_size)

	if play_id == -1 then
		return
	end
	--' Проверяем создан ли у нас соответствующий саунд обжект или его надо создать
	if sound_object_by_theme[theme][play_id] == nil then
		if type(sound_theme.ph_snd_themes[theme][play_id]) == "table" then
			sound_object_by_theme[theme][play_id.."_r"] = get_safe_sound_object(sound_theme.ph_snd_themes[theme][play_id][1].."_r")
			sound_object_by_theme[theme][play_id.."_l"] = get_safe_sound_object(sound_theme.ph_snd_themes[theme][play_id][1].."_l")
		else
			sound_object_by_theme[theme][play_id] = get_safe_sound_object(sound_theme.ph_snd_themes[theme][play_id])
		end
	end

	sound_object_by_theme[theme].last_id = play_id

	--' Возвращаем саунд обжект
	if type(sound_theme.ph_snd_themes[theme][play_id]) == "table" then
		return sound_object_by_theme[theme][play_id.."_r"], sound_object_by_theme[theme][play_id.."_l"]
	else
		return sound_object_by_theme[theme][play_id]
	end
end

local sound_object_by_path = {}
--' Обертка вокруг функции, возвращающий звуковой объект.
function get_safe_sound_object(path)
	if sound_object_by_path[path] == nil then
		sound_object_by_path[path] = sound_object(path)
	end
	return sound_object_by_path[path]
end

function stop_all_sound_object()
	for k,v in pairs(sound_object_by_path) do
		if v:playing() then
			v:stop()
		end
	end
end
function clear_all_sound_object()
	sound_object_by_theme = {}
end
