-- nv120216, nv130228 - removed useless test logic, get_megafone()
-- nv140313, nv140329 some optimization
-- nv140420 reworked gulag system management

local level_gulags = xr_gulag.level_gulags
-- Add your level here if it needs logic loading
-- 140420 merged gulag_agroprom, gulag_agroprom_underground changed 
local level_gulag_ltxs = {
	agr = gulag_agroprom, -- gulag_agroprom_underground,
	val = gulag_dark_valley,
	off = gulag_dark_valley, -- cit = gulag_deadcity, --  not used in vanilla 
	gen = gulag_general,
	pri = gulag_pripyat,
	["rad"] = gulag_radar
}

-- кэш для динамических ltx
local dynamic_ltx = {}

function loadJob(sj, gname, type, squad, groups, gulag)
	-- dbglog("*** loadJob for "..type)
	-- for k, v in pairs(level_gulags) do -- unused gulag parameter removed
		-- if v.load_job(sj, gname, type, squad, groups) then return end
	-- end
	local gulag_script_obj = level_gulags[string.sub(type, 1, 3)]
	if gulag_script_obj then
		gulag_script_obj.load_job(sj, gname, type, squad, groups)
	end
end

function loadStates(gname, type)
	local f

	-- for k, v in pairs(level_gulags) do
		-- f = v.load_states(gname, type)
		-- if f then
			-- return f
		-- end
	-- end
	local gulag_script_obj = level_gulags[string.sub(type, 1, 3)]
	if gulag_script_obj then
		f = gulag_script_obj.load_states(gname, type)
		if f then
			return f
		end
	end

	abort("ERROR: unrecognized type '%s' for gulag %s", type, gname)
end

-- загрузка динамических ltx
-- их имена: "*имя_смарттерейна*тип_гулага"
-- nv140329 added type_prefix, nv140420 converted to table index scheme
function loadLtx(name, type, type_prefix)
	--printf( "loadLtx: name=%s type=%s", name, type )

	-- local h    = "*"..name.."*"..type
	local h    = table.concat({"*",name,"*",type})
	local dltx = dynamic_ltx[h]

	if dltx then
		-- dbglog(type.." - cache hit")
		return dltx, h
	else
		-- most-commonly-used path
--[[ eliminated loop
		local l

		for k, v in pairs(level_gulag) do
			l = v.load_ltx(name, type)
			if l ~= nil then
				dltx = create_ini_file(l)
				--printf("gulag <ltx>:\n%s", l)
				dynamic_ltx[h] = dltx

				return dltx, h
			end
		end
--]]
		if type_prefix == nil then type_prefix = string.sub(type, 1, 3) end
		local gulag_ltx = level_gulag_ltxs[type_prefix]
		if gulag_ltx then
			local l = gulag_ltx.load_ltx(type)
			if l ~= nil then
				dltx = create_ini_file(l)
				--printf("gulag <ltx>:\n%s", l)
				dynamic_ltx[h] = dltx

				return dltx, h
			end
		end

		return nil, nil
	end
end
