-- file:		UI_MM_OPT_MAIN.script
-- created:		01.07.2005
-- description:	options dialog
-- author:		Serge Vynnychenko
--

class "options_dialog" (CUIScriptWnd)

function options_dialog:__init() super()
   self:SetFont(GetFontMedium()) --set base font for dialog.

	self.m_preconditions	= {}
   
    self:InitControls()
    self:InitCallBacks()
end

function options_dialog:__finalize()

end

function options_dialog:InitControls()	
	self:Init(0,0,1024,768)
	self:Enable(true)
	
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_mm_opt.xml")
	

    if _z and _z.mainmenu_anims then
		xml:InitStatic("back_video", self)
	end
	xml:InitStatic("background", self)
    if _z and _z.mainmenu_anims then
		xml:InitStatic("rug_video", self)
	end
	self.dialog = xml:InitStatic("main_dialog:dialog", self)
	
	xml:InitStatic("main_dialog:cap_options", self.dialog)
		
	self.dlg_video = ui_mm_opt_video.opt_video()
	self.dlg_video:InitControls(55,74, xml, self)
	self.dialog:AttachChild(self.dlg_video)

	self.dlg_sound = ui_mm_opt_sound.opt_sound()
	self.dlg_sound:InitControls(55,74, xml, self)
	self.dlg_sound:Show(false)
	self.dialog:AttachChild(self.dlg_sound)
	
	self.dlg_gameplay = ui_mm_opt_gameplay.opt_gameplay()
	self.dlg_gameplay:InitControls(55,74, xml, self)
	self.dlg_gameplay:Show(false)
	self.dialog:AttachChild(self.dlg_gameplay)
	
	self.dlg_controls = ui_mm_opt_controls.opt_controls()
	self.dlg_controls:InitControls(55,74, xml, self)
	self.dlg_controls:Show(false)
	self.dialog:AttachChild(self.dlg_controls)

	self.dlg_video_adv = ui_mm_opt_video_adv.opt_video_adv()
	self.dlg_video_adv:InitControls(55,74, xml, self)
	self.dlg_video_adv:Show(false)
	self.dialog:AttachChild(self.dlg_video_adv)

	local btn
	btn = xml:Init3tButton("main_dialog:btn_accept", self.dialog)
	self:Register(btn, "btn_accept")
	btn = xml:Init3tButton("main_dialog:btn_cancel", self.dialog)
	self:Register(btn, "btn_cancel")
	
	self.tab = xml:InitTab("main_dialog:tab", self.dialog)
	self:Register(self.tab, "tab")
	
	
	self.message_box = CUIMessageBoxEx()
	
	self.b_r2_restart_shown		= false
	
	self.cap_download				= xml:InitStatic		("download_static",self)
	self.text_download				= xml:InitStatic		("download_text",self)
	self.download_progress			= xml:InitProgressBar	("progress_download", self)
	self.btn_cancel_download		= xml:Init3tButton		("btn_cancel_download", self)
	self:Register					(self.btn_cancel_download, "btn_cancel_download")
	
end

function options_dialog:UpdateControls()
	local opt = COptionsManager()

	opt:SetCurrentValues("mm_opt_video_preset")
	opt:SaveBackupValues("mm_opt_video_preset")

	opt:SetCurrentValues("mm_opt_video")
	opt:SaveBackupValues("mm_opt_video")
	
	opt:SetCurrentValues("mm_opt_video_adv")
	opt:SaveBackupValues("mm_opt_video_adv")

	opt:SetCurrentValues("mm_opt_gameplay")
	opt:SaveBackupValues("mm_opt_gameplay")

	opt:SetCurrentValues("mm_opt_sound")
	opt:SaveBackupValues("mm_opt_sound")

	opt:SetCurrentValues("mm_opt_controls")

	opt:SetCurrentValues("key_binding")

	if not xrRender_test_r2_hw() then
		self.combo_r2:SetCurrentID		(0)
		self.combo_r2:Enable			(false)
	end
	
	self:UpdateDependControls()

	if closecaption then
	if (alife() ~= nil) then
		if db.cc_npc == nil then closecaption.read_cc_ini() end
		self.check_playigm:SetCheck(db.p_igm)
		self.check_ccigm:SetCheck(db.cc_igm)
		self.radio_captioning:SetNewActiveTab((db.cc_npc and 1 or 0) * (db.cc_icc and 2 or 1))
		if closecaption.is_version_ok() == false then
			self.check_ccigm:Show(false)
		end
	else
		self.check_playigm:Show(false)
		self.check_ccigm:Show(false)
		self.frame_captioning:Show(false)
		self.radio_captioning:Show(false)
	end
	end
end

function options_dialog:UpdateDependControls()
	
	local _current_id	= self.combo_r2:CurrentID()

	for i,j in pairs(self.m_preconditions) do
		j				(i, _current_id)
	end
--[[	
	if self.combo_r2:CurrentID()==1 then
		self.ch_r2_sun:Enable			(true)
		self.ch_r2_sun_det:Enable		(true)
	else
		self.ch_r2_sun:Enable			(false)
		self.ch_r2_sun_det:Enable		(false)
	end
]]
end

function options_dialog:InitCallBacks()
	self:AddCallback("tab",					ui_events.TAB_CHANGED,		self.OnTabChange,			self)
	self:AddCallback("btn_advanced_graphic",ui_events.BUTTON_CLICKED,	self.OnBtnAdvGraphic,		self)
	self:AddCallback("btn_accept",			ui_events.BUTTON_CLICKED,	self.OnBtnAccept,			self)
	self:AddCallback("btn_cancel",			ui_events.BUTTON_CLICKED,	self.OnBtnCancel,			self)
	self:AddCallback("btn_default_graphic",	ui_events.BUTTON_CLICKED,	self.OnBtnDefGraph,			self)	
	self:AddCallback("btn_default_sound",	ui_events.BUTTON_CLICKED,	self.OnBtnDefSound,			self)	
	self:AddCallback("combo_r2",			ui_events.LIST_ITEM_SELECT,	self.OnR2changed,			self)	
	self:AddCallback("combo_preset",		ui_events.LIST_ITEM_SELECT,	self.OnPresetChanged,		self)	
	self:AddCallback("btn_simply_graphic",	ui_events.BUTTON_CLICKED,	self.OnSimplyGraphic,		self)	
	self:AddCallback("btn_keyb_default",	ui_events.BUTTON_CLICKED,	self.OnBtnDefault,			self)
	self:AddCallback("btn_check_updates",	ui_events.BUTTON_CLICKED,	self.OnBtnCheckUpdates,		self)

	self:AddCallback("btn_cancel_download",	ui_events.BUTTON_CLICKED,	self.OnBtn_CancelDownload,	self)
	
end

function options_dialog:OnBtnCheckUpdates()
	local console			= get_console()
	console:execute			("check_for_updates 1")
end

function options_dialog:OnBtnDefault()
	local console			= get_console()
--	console:execute			("cfg_load default_controls")
	console:execute			("unbindall")

	local opt				= COptionsManager()
	opt:SetCurrentValues	("mm_opt_controls")
	opt:SetCurrentValues	("key_binding")
end

function options_dialog:OnPresetChanged()	
	local opt					= COptionsManager()
	opt:SetCurrentValues		("mm_opt_video")
	opt:SetCurrentValues		("mm_opt_video_adv")
end

function options_dialog:OnR2changed()	

	self:UpdateDependControls				()
	
	if false==self.b_r2_restart_shown then
		self.b_r2_restart_shown			 = true
		self.message_box:Init			("message_box_restart_game")
		self:GetHolder():start_stop_menu(self.message_box,true)
	end
	
end

function options_dialog:OnBtnDefGraph()
	local opt = COptionsManager()
	opt:SendMessage2Group("mm_opt_video","set_default_value")
end

function options_dialog:OnBtnDefSound()	
	local opt = COptionsManager()
	opt:SendMessage2Group("mm_opt_sound","set_default_value")
end

function options_dialog:OnBtnAccept()
	
	local opt = COptionsManager()
	local console = get_console()
	
	opt:SaveValues("mm_opt_video_preset")
	opt:SaveValues("key_binding")
	opt:SaveValues("mm_opt_video")
	opt:SaveValues("mm_opt_video_adv")
	opt:SaveValues("mm_opt_gameplay")
	opt:SaveValues("mm_opt_sound")	
	opt:SaveValues("mm_opt_controls")
	opt:OptionsPostAccept()	

	if closecaption then
	if (alife() ~= nil) then
		db.p_igm = self.check_playigm:GetCheck()
		db.cc_igm = self.check_ccigm:GetCheck()
		local rcap = self.radio_captioning:GetActiveIndex()
		db.cc_npc = (rcap > 0)
		db.cc_icc = (rcap > 1)
		closecaption.save_variable("cc_icc", db.cc_icc)
		closecaption.save_variable("cc_npc", db.cc_npc)
		closecaption.save_variable("cc_igm", db.cc_igm)
		closecaption.save_variable("p_igm", db.p_igm)
	end
	end

	self:GetHolder():start_stop_menu	(self.owner, true) --new(show main window)
	self:GetHolder():start_stop_menu	(self,true)
	self.owner:Show						(true)
	
end

function options_dialog:OnBtnCancel()
	local opt = COptionsManager()
	opt:UndoGroup("mm_opt_video_preset")
	opt:UndoGroup("mm_opt_video")
	opt:UndoGroup("mm_opt_video_adv")
	opt:UndoGroup("mm_opt_sound")
	opt:OptionsPostAccept()
	
	self:GetHolder():start_stop_menu	(self.owner, true) --new(show main window)
	self:GetHolder():start_stop_menu	(self,true)
	self.owner:Show						(true)
end

function options_dialog:OnTabChange()
	self.dlg_video:Show		(false)
	self.dlg_sound:Show		(false)
	self.dlg_gameplay:Show	(false)
	self.dlg_controls:Show	(false)
	self.dlg_video_adv:Show	(false)
	
	local i = self.tab:GetActiveIndex()
	if i == 0 then
		self.dlg_video:Show(true)		
	elseif i == 1 then
		self.dlg_sound:Show(true)
	elseif i == 2 then
		self.dlg_gameplay:Show(true)
	elseif i == 3 then
		self.dlg_controls:Show(true)
	end
end

function options_dialog:OnBtnAdvGraphic()
	self.dlg_video:Show		(false)
	self.dlg_video_adv:Show	(true)
end

function options_dialog:OnSimplyGraphic()
	self.dlg_video:Show		(true)
	self.dlg_video_adv:Show	(false)
end

function options_dialog:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	
	if res==false then
	
		local bind = dik_to_bind(dik)
		
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
				if self.dlg_video_adv:IsShown() then
					self.dlg_video_adv:Show	(false)
					self.dlg_video:Show		(true)
				else
					self:GetHolder():start_stop_menu	(self.owner, true) --new(show main window)
					self:GetHolder():start_stop_menu	(self,true)
					self.owner:Show						(true)
				end
			end	
		
		end
	end
	   
	return res
end

function options_dialog:Update()
	CUIScriptWnd.Update(self)
	
	local mm = main_menu.get_main_menu()
	local sss = mm:GetPatchProgress()
	
	if sss:GetInProgress() then
		self.text_download:Show					(true)
		self.cap_download:Show					(true)
		self.download_progress:Show				(true)
		local _progr							= sss:GetProgress()
		self.download_progress:SetProgressPos	(_progr)
		local str								= string.format("%.0f%%(%s)",_progr,sss:GetFlieName())
		self.text_download:SetText				(str)
		self.btn_cancel_download:Show			(true)
	else
		self.text_download:Show					(false)
		self.cap_download:Show					(false)
		self.download_progress:Show				(false)
		self.btn_cancel_download:Show			(false)
	end
end

function options_dialog:OnBtn_CancelDownload()
	local mm = main_menu.get_main_menu()
	mm:CancelDownload()
end
